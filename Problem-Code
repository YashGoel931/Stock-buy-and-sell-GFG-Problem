//Initial Template for Java

import java.io.*;
import java.util.*;

public class GFG {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
        while(t-->0){
            int n = Integer.parseInt(br.readLine().trim());
            int A[] = new int[n];
            String inputLine[] = br.readLine().trim().split(" ");
            for(int i=0; i<n; i++){
                A[i] = Integer.parseInt(inputLine[i]);
            }
            int p = 0;
            for(int i=0; i<n-1; i++)
                p += Math.max(0,A[i+1]-A[i]);
                
            Solution obj = new Solution();
            ArrayList<ArrayList<Integer> > ans = obj.stockBuySell(A, n);
            if(ans.size()==0)
                System.out.print("No Profit");
            else{
                int c=0;
                for(int i=0; i<ans.size(); i++)
                    c += A[ans.get(i).get(1)]-A[ans.get(i).get(0)];
                
                if(c==p)
                    System.out.print(1);
                else
                    System.out.print(0);
            }System.out.println();
        }
    }
}
// } Driver Code Ends
class Solution{
    ArrayList<ArrayList<Integer>> stockBuySell(int arr[], int n) {
    ArrayList<ArrayList<Integer>> al=new ArrayList<ArrayList<Integer>>();
    int maxp=n-1,maxs=0,f=0;
     for(int i=n-1 ; i>0 ; i--){
      if(arr[i]>arr[i-1] && maxs<(arr[maxp]-arr[i-1])){
       maxs=arr[maxp]-arr[i-1];
       f=i;
      }
      else if(arr[i]<arr[i-1] && f!=0 && maxs!=0){
      ArrayList<Integer> l1=new ArrayList<Integer>();
      l1.add(0,i);
      l1.add(1,maxp);
      al.add(l1);
       maxp=i-1;
       maxs=0;
      }
      else if(arr[i]<arr[i-1] && maxs==0){
       maxp=i-1;
      }
     }
     if(maxs!=0){
      ArrayList<Integer> l1=new ArrayList<Integer>();
      l1.add(0,f-1);
      l1.add(1,maxp);
      al.add(l1);
     }
     return al;
    }
}
